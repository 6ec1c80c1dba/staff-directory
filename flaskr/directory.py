from logging import exception
from flask import (
    Blueprint, flash, g, redirect, render_template, request, url_for, session
)
from werkzeug.exceptions import abort
from werkzeug.security import check_password_hash, generate_password_hash
from flaskr.auth import login_required
from flaskr.db import get_db
import random, math

bp = Blueprint('directory', __name__, url_prefix='/directory')

@bp.route('/')
@login_required
def index():
    """Returns all staff members"""
    db = get_db()
    my_staff_member = db.execute(
        'SELECT s.id, title, first_name, last_name, preferred, job_role, email, system_administrator'
        ' FROM staff_member s JOIN user u ON s.id = u.staff_id'
        ' WHERE s.id = ?',
        (g.user['staff_id'],)
    ).fetchone()
    staff_members = db.execute(
        'SELECT s.id, title, first_name, last_name, preferred, job_role, email, in_department, extension_number'
        ' FROM staff_member s '
        ' ORDER BY s.first_name ASC'
    ).fetchall()
    department = db.execute(
        'SELECT d.id, department_name'
        ' FROM department d'
    ).fetchall()
    return render_template('directory/index.html', my_staff_member = my_staff_member,staff_members=staff_members, department = department)

def get_staff_member(staff_id, check_staff_member=True):
    """Finds current staff member to support update user and staff member details"""
    staff_member = get_db().execute(
        'SELECT s.id, title, first_name, last_name, preferred, job_role, email, username'
        ' FROM staff_member s JOIN user u ON s.id = u.staff_id'
        ' WHERE s.id = ?',
        (staff_id,)
    ).fetchone()

    if staff_member is None:
        abort(404, f"Staff id {id} doesn't exist.")

    if staff_member and staff_member['id'] != g.user['staff_id']:
        abort(403)

    return staff_member

def generate_extension_number():
    """Staff extension numbers are autogenerated"""
    extension_number = ""
    for i in range(1,6):
        a = random.random()
        b = math.floor(a*10)
        extension_number += str(b)
    return extension_number

@bp.route('/create', methods=('GET', 'POST'))
@login_required
def create():
    """"Renders form for admins to create new staff members details and insert them to the staff member table in the database"""
    if request.method == 'POST':
        title = request.form['title']
        first_name = request.form['first_name']
        last_name = request.form['last_name']
        preferred = request.form['preferred']
        job_role = request.form['job_role']
        email = f'{first_name.lower()}{last_name.lower()}@mediacentral.com'
        extension_number = generate_extension_number()
        system_administrator = request.form['system_administrator']
        in_department = request.form['department_id']
        count = 0
        error = None

        if not title:
            error = 'Title is required.'
        # Check that staff members email is unique   
        db = get_db()
        staff_member = db.execute(
            'SELECT * FROM staff_member WHERE email = ?', (email, )
        ).fetchall()
        # Add a increasing number within email until unique
        for i in staff_member:
            count+=1
            email = f'{first_name.lower()}{last_name.lower()}{str(count)}@mediacentral.com'
        extension_in_use = db.execute(
            'SELECT * FROM staff_member WHERE extension_number = ?', (extension_number, )
        ).fetchone()
        if extension_in_use:
            extension_number = generate_extension_number()
        if error is not None:
            flash(error)
        else:
            db.execute(
                'INSERT INTO staff_member (title, first_name, last_name, preferred, job_role, email, extension_number, system_administrator, in_department)'
                ' VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
                (title, first_name, last_name, preferred, job_role, email, extension_number, system_administrator, in_department)
            )
            db.commit()
            return redirect(url_for('directory.index'))

    return render_template('directory/create.html')

@bp.route('/<int:id>/update/', methods=('GET', 'POST'))
@login_required
def update(id):
    """"Renders form for user to update their staff member details and save changes to the staff member table in the database"""
    staff_member = get_staff_member(id)
    if request.method == 'POST':
        title = request.form['title']
        preferred = request.form['preferred']
        error = None

        if not title:
            error = 'Title is required.'

        if error is not None:
            flash(error)
        else:
            db = get_db()
            db.execute(
                'UPDATE staff_member SET title = ?, preferred = ?'
                ' WHERE id = ?',
                (title, preferred, id)
            )
            db.commit()
            return redirect(url_for('directory.index'))
    return render_template('directory/update.html', staff_member = staff_member)


@bp.route('/<int:id>/change_password', methods=('GET', 'POST'))
@login_required
def change_password(id):
    """"Renders form for user to update their login details and submit updates to the user table in the database"""
    staff_member = get_staff_member(id)
    if request.method == 'POST':
        password = request.form['NewPassword']
        error = None
        db = get_db()
        user = db.execute(
            'SELECT * FROM user WHERE staff_id = ?', (id, )
        ).fetchone()
        if not password:
            error = 'Please fill in the box below with your new password.'
        if check_password_hash(user['password'], generate_password_hash(password)):
            error = "This password has been used previously"
        if error is not None:
            flash(error)
        else:
            db.execute(
                'UPDATE user SET password = ?'
                ' WHERE staff_id = ?',
                (generate_password_hash(password), id,)
            )
            db.commit()
            return redirect(url_for('directory.index'))
    return render_template('directory/change_password.html', staff_member = staff_member)

@bp.route('/delete', methods=('GET', 'POST'))
@login_required
def delete():
    """"Renders form for admins to delete staff members details and remove them to the staff member and user table in the database."""
    if request.method == 'POST':
        username = request.form['username']
        error = None

        if not username:
            error = 'Username is required to find user.'

        if error is not None:
            flash(error)
        else:
            db = get_db()
            db.execute('DELETE FROM staff_member WHERE email = ?', (username,))
            db.execute('DELETE FROM user WHERE username = ?', (username,))
            db.commit()
            return redirect(url_for('directory.index'))
            
    return render_template('directory/delete.html')
